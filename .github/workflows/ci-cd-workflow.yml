name: CI/CD
on: [push]
jobs:
  install-dependencies:
    name: Install dependencies üèóÔ∏è
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install PNPM
        uses: pnpm/action-setup@v2
        with:
          version: 7.23.0

      - name: Cache node_modules
        id: cache-pnpm
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          path: |
            **/node_modules
            **/.cache
            ~/**/.cache
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - if: ${{ steps.cache-pnpm.outputs.cache-hit != 'true' }}
        name: List the state of node modules
        continue-on-error: true
        run: pnpm list --color

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

  unit-tests:
    needs: install-dependencies
    name: Run tests üß™
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install PNPM
        uses: pnpm/action-setup@v2
        with:
          version: 7.23.0

      - name: Cache node_modules
        id: cache-pnpm
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          path: |
            **/node_modules
            **/.cache
            ~/**/.cache
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Run tests
        run: pnpm test

  linter:
    needs: install-dependencies
    name: Linter üíÑ
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install PNPM
        uses: pnpm/action-setup@v2
        with:
          version: 7.23.0

      - name: Cache node_modules
        id: cache-pnpm
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          path: |
            **/node_modules
            **/.cache
            ~/**/.cache
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Linter
        run: echo "It's work"

  deploy:
    needs: [linter, unit-tests]
    name: Deploy üöÄ
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    env:
      API_KEY: ${{ secrets.API_KEY }}
      NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
      NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
      BASE_URL_AUTH: https://websitepipelinetest.netlify.app
      BASE_URL_WEBSITE: https://websitepipelinetest.netlify.app
      BASE_URL_BLOG: https://websitepipelinetest.netlify.app
      BASE_URL_SHOP: https://websitepipelinetest.netlify.app
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install PNPM
        uses: pnpm/action-setup@v2
        with:
          version: 7.23.0

      - name: Cache node_modules
        id: cache-pnpm
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          path: |
            **/node_modules
            **/.cache
            ~/**/.cache
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-


      - name: Move to website folder
        run: cd apps/website

      - name: Link the project to Netlify
        run: netlify link --id $NETLIFY_SITE_ID

      - name: Set environment variables to Netlify
        run: |
          netlify env:set API_KEY $API_KEY
          netlify env:set BASE_URL_AUTH $BASE_URL_AUTH
          netlify env:set BASE_URL_WEBSITE $BASE_URL_WEBSITE
          netlify env:set BASE_URL_BLOG $BASE_URL_BLOG
          netlify env:set BASE_URL_SHOP $BASE_URL_SHOP

      - name: Deploy to Netlify
        run: |
          netlify link --id $NETLIFY_SITE_ID
          netlify deploy --prod --site $NETLIFY_SITE_ID --auth $NETLIFY_AUTH_TOKEN
